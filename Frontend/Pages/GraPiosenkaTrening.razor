@page "/gra-piosenka-trening"
@using Frontend.Services
@using Frontend.Shared
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthorizedHttpClient AuthHttp
@inject HttpClient Http

<div class="game-fullscreen @(!Started ? "is-start" : "has-fixed-title") flex flex-col items-center justify-center min-h-screen text-center px-4">
    <h1 class="game-title">🎯 Jaka To Piosenka?</h1>

    @if (!Started)
    {
        <section class="song-hero">
            <div class="song-hero__chip">
                <i class="fas fa-dumbbell"></i>
                Tryb treningowy
            </div>

            <h2 class="song-hero__title">Jaka To Piosenka?</h2>
            <p class="song-hero__subtitle">Sprawdź swoje umiejętności bez presji punktów.</p>

            <button class="btn-hero" @onclick="StartGame">
                <span class="btn-hero__glow"></span>
                <i class="fas fa-play"></i>
                <span>Start</span>
                <kbd>Enter</kbd>
            </button>
        </section>
    }
    else if (CurrentSong != null)
    {
        <div class="flex flex-col items-center gap-6 w-full max-w-3xl mt-6">

            <div class="volume-pro @(Muted ? "is-muted" : "")" style="--fill:@($"{Volume*100}%")">
                <button class="vol-btn" @onclick="ToggleMute" aria-label="Wycisz / Włącz dźwięk" title="Wycisz / Włącz">
                    <i class="@VolumeIcon"></i>
                </button>

                <input type="range"
                       class="pro-range"
                       min="0" max="100" step="1"
                       @bind-value="VolumeP"
                       @bind-value:event="oninput"
                       style="--fill:@($"{VolumeP}%")" />

                <span class="vol-value">@VolumeP%</span>
            </div>

            <audio src="@AudioUrl" @ref="AudioRef" crossorigin="anonymous"></audio>

            @if (!string.IsNullOrEmpty(AudioUrl))
            {
                <AudioVisualizer IsPlaying="@(Started && !Answered)" />
            }

            @if (Started && !Answered)
            {
                <div class="hud-timer hud-timer--xl" aria-live="polite">
                    <div id="base-timer" class="base-timer" role="timer" aria-label="Pozostały czas">
                        <svg class="base-timer__svg" viewBox="0 0 100 100">
                            <g class="base-timer__circle">
                                <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
                                <path id="base-timer-path-remaining" stroke-dasharray="283"
                                      class="base-timer__path-remaining green"
                                      d="M 50, 50 m -45, 0 a 45,45 0 1,0 90,0 a 45,45 0 1,0 -90,0">
                                </path>
                            </g>
                        </svg>
                        <span id="base-timer-label" class="base-timer__label">0:20</span>
                    </div>
                </div>
            }

            @if (Answered)
            {
                <div class="result-modal" role="dialog" aria-modal="true">
                    <div class="result-header @(LastGuessCorrect ? "win" : "lose")">
                        <h3 class="result-title">
                            @((LastGuessCorrect) ? "🎉Dobrze!" : "❌Spróbuj ponownie!")
                        </h3>
                        <p class="result-subtitle">@ResultMessage</p>
                    </div>

                    <div class="result-actions">
                        <button class="btn-modal neutral" @onclick='() => Navigation.NavigateTo("/panel")'>
                            Wróć do panelu
                        </button>
                        <button class="btn-modal primary" @onclick="StartGame">
                            Jeszcze raz (Enter)
                        </button>
                    </div>

                    <button class="result-close" title="Zamknij (Esc)"
                            @onclick='() => Navigation.NavigateTo("/panel")'>×</button>
                </div>
            }

            <div class="input-wrapper-guess" id="guess-wrapper">
                <input class="guess-input" placeholder="🎵 Zgadnij tytuł..."
                       @bind="Guess" @oninput="OnInput" disabled="@Answered" />

                @if (TitleSuggestions.Any())
                {
                    <ul class="suggestions-list">
                        @foreach (var title in TitleSuggestions)
                        {
                            <li @onclick="@(() => SelectSuggestion(title))">@title</li>
                        }
                    </ul>
                }

                <button class="submit-btn right-btn" @onclick="SubmitGuess" disabled="@Answered">✅ Zatwierdź</button>
            </div>
        </div>
    }
</div>

@code {
    protected class SongDto { public Guid Id { get; set; } public string Title { get; set; } = string.Empty; }
    protected class GuessResult
    {
        public bool Correct { get; set; }
        public int Score { get; set; }
        public string CorrectTitle { get; set; } = "";
        public string? DisplayTitle { get; set; }
    }

    protected SongDto? CurrentSong;
    protected string AudioUrl = "";
    protected ElementReference AudioRef;
    protected string Guess = string.Empty;
    protected bool Started = false;
    protected bool Answered = false;
    protected string ResultMessage = "";
    protected DateTime StartTime;
    private List<string> TitleSuggestions = new();

    // UX jak w trybie rankingowym
    private Guid GameSessionId = Guid.NewGuid();
    private bool AudioStarted = false;
    private int Countdown = 20;
    private System.Timers.Timer? countdownTimer;

    // Głośność – identycznie jak w rankingu
    private double Volume = 0.8; // 0..1
    private bool Muted = false;
    private int _volumeP = 80;    // 0..100
    private int VolumeP
    {
        get => _volumeP;
        set
        {
            if (_volumeP == value) return;
            _volumeP = value;
            Volume = Math.Clamp(value / 100.0, 0, 1);
            if (!Muted)
                _ = JS.InvokeVoidAsync("setAudioVolume", AudioRef, Volume);
        }
    }
    private string VolumeIcon =>
        (Muted || Volume <= 0.001) ? "fas fa-volume-mute"
        : (Volume < 0.34) ? "fas fa-volume-off"
        : (Volume < 0.67) ? "fas fa-volume-down"
        : "fas fa-volume-up";

    private bool LastGuessCorrect;

    private async void StartCountdown()
    {
        Countdown = 20;
        StartTime = DateTime.Now;

        try
        {
            await JS.InvokeVoidAsync("Timer.start", DotNetObjectReference.Create(this), GameSessionId, 20);
        }
        catch (JSException ex)
        {
            Console.WriteLine($"JS Error: {ex.Message}");
        }
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        Guess = e.Value?.ToString() ?? "";
        if (Guess.Length >= 2)
        {
            TitleSuggestions = await Http.GetFromJsonAsync<List<string>>($"/api/songs/titles?query={Guess}");
        }
        else
        {
            TitleSuggestions.Clear();
        }
    }

    private void SelectSuggestion(string title)
    {
        Guess = title;
        TitleSuggestions.Clear();
    }

    protected async Task StartGame()
    {
        GameSessionId = Guid.NewGuid();
        Started = true;
        Answered = false;
        ResultMessage = "";
        Guess = "";
        LastGuessCorrect = false;

        var songs = await Http.GetFromJsonAsync<List<SongDto>>("/api/songs/random?count=1");
        if (songs?.Count > 0)
        {
            CurrentSong = songs[0];
            AudioStarted = false;
            AudioUrl = $"https://localhost:7236/api/media/song-audio/{CurrentSong.Id}";
            await JS.InvokeVoidAsync("stopAudio", AudioRef);
            StateHasChanged();
            await Task.Delay(100);

            StartTime = DateTime.Now;
            StartCountdown();
        }
    }

    protected virtual async Task SubmitGuess()
    {
        if (CurrentSong == null || Answered) return;

        Answered = true;
        countdownTimer?.Stop();
        await JS.InvokeVoidAsync("Timer.stop");

        var duration = (int)(DateTime.Now - StartTime).TotalSeconds;

        var request = new
        {
            itemId = CurrentSong.Id,
            guessText = CleanGuess(Guess),
            mode = "training",
            duration = duration
        };

        var client = await AuthHttp.GetClientAsync();
        var res = await client.PostAsJsonAsync("/api/guess/song", request);

        if (!res.IsSuccessStatusCode)
        {
            ResultMessage = "❌ Błąd serwera lub brak autoryzacji.";
            return;
        }

        var result = await res.Content.ReadFromJsonAsync<GuessResult>();
        await JS.InvokeVoidAsync("stopAudio", AudioRef);

        LastGuessCorrect = result!.Correct;
        ResultMessage = result.Correct
            ? $"{result.DisplayTitle ?? result.CorrectTitle}"
            : $"{result.DisplayTitle ?? result.CorrectTitle}";
    }

    [JSInvokable]
    public async Task TimeoutGuess(Guid sessionId)
    {
        if (sessionId != GameSessionId || Answered || !Started)
            return;

        Answered = true;
        ResultMessage = "⏱ Czas minął!";
        await JS.InvokeVoidAsync("stopAudio", AudioRef);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Started && CurrentSong != null && !Answered && AudioRef.Context != null && !AudioStarted)
        {
            AudioStarted = true;

            await Task.Delay(200);
            await JS.InvokeVoidAsync("playAudio", AudioRef);

            await JS.InvokeVoidAsync("startTimeout",
                DotNetObjectReference.Create(this),
                "invokeMethodAsync",
                nameof(TimeoutGuess),
                GameSessionId,
                20000);
        }
    }

    private string CleanGuess(string input)
    {
        var match = System.Text.RegularExpressions.Regex.Match(input, @"^(.*?)(?: \(\d{4}\))?$");
        if (match.Success)
        {
            var cleaned = match.Groups[1].Value;
            if (cleaned.Contains(" - "))
                return cleaned.Split(" - ")[1].Trim();
            return cleaned.Trim();
        }
        return input.Trim();
    }

    private async Task ToggleMute()
    {
        Muted = !Muted;
        if (Muted)
            await JS.InvokeVoidAsync("muteAudio", AudioRef);
        else
            await JS.InvokeVoidAsync("unmuteAudio", AudioRef);
        if (!Muted)
            await JS.InvokeVoidAsync("setAudioVolume", AudioRef, Volume);
    }
}
 