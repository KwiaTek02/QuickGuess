@page "/login"
@using Frontend.Services
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject HttpClient Http
@inject IJSRuntime JS

<div class="fullscreen-bg">
    <div class="login-card enhanced">
        <h2 class="login-title">Logowanie</h2>

        @if (!string.IsNullOrWhiteSpace(Error))
        {
            <p class="error">@Error</p>
        }

        <div class="input-wrapper">
            <i class="bi bi-envelope-fill input-icon"></i>
            <InputText class="input-field" @bind-Value="Email" placeholder="Email" />
        </div>

        <div class="input-wrapper">
            <i class="bi bi-lock-fill input-icon"></i>
            <InputText class="input-field" @bind-Value="Password" placeholder="Hasło" type="password" />
        </div>

        <div class="auth-links left-align">
            <a href="/forgot-password">Zapomniałeś hasła?</a>
        </div>

        <button @onclick="LoginUser" class="btn login-btn">Zaloguj się</button>

        <div class="google-btn-wrapper" style="margin-top: 0.75rem;">
            
            <div id="gsi_btn"></div>
        </div>

        <div class="auth-links center-row">
            <span>Nie masz konta?</span>
            <a href="/register" style="margin-left: 0.4rem;">Zarejestruj się</a>
        </div>
    </div>
</div>

@code {
    string Email = "";
    string Password = "";
    string Error = "";

    private const string GoogleClientId = "628190551033-vgs07tcj28liadrpe05ajpfh7u083qga.apps.googleusercontent.com";

    private DotNetObjectReference<Login>? _dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _dotNetRef = DotNetObjectReference.Create(this);
        // init + render oficjalnego przycisku
        await JS.InvokeVoidAsync("googleAuth.init", GoogleClientId, _dotNetRef);
        await JS.InvokeVoidAsync("googleAuth.renderButton", "gsi_btn"); // theme/size itp. bierzemy z JS
    }

    [JSInvokable]
    public async Task OnGoogleCredential(string credential)
    {
        // credential = ID token (JWT) od Google
        var ok = await AuthService.GoogleLogin(credential);
        if (ok)
        {
            Navigation.NavigateTo("/panel", true);
        }
        else
        {
            Error = "Logowanie Google nie powiodło się.";
            StateHasChanged();
        }
    }

    private async Task LoginUser()
    {
        var success = await AuthService.Login(Email, Password);
        if (!success)
        {
            Error = "Niepoprawne dane logowania lub email niezweryfikowany.";
        }
        else
        {
            Navigation.NavigateTo("/panel");
        }
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }

}
