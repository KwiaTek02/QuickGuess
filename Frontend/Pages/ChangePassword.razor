@page "/change-password"
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="fullscreen-bg">
    <div class="login-card enhanced">
        <h2 class="login-title">Zmień hasło</h2>

        @if (!string.IsNullOrWhiteSpace(Success))
        {
            <p style="color:#16a34a;font-weight:700;margin-bottom:1rem;text-align:center">@Success</p>
            <button class="btn login-btn" @onclick='() => Navigation.NavigateTo("/panel")'>Przejdź do panelu</button>
        }
        else
        {
            @if (!string.IsNullOrWhiteSpace(Error))
            {
                <p class="error">@Error</p>
            }

            <div class="input-wrapper">
                <i class="bi bi-lock-fill input-icon"></i>
                <InputText class="input-field" @bind-Value="CurrentPassword" placeholder="Obecne hasło" type="@(ShowCurrent ? "text" : "password")" />
                <button class="icon-btn" type="button" @onclick="() => ShowCurrent = !ShowCurrent" title="Pokaż/ukryj">
                    <i class="bi @(ShowCurrent ? "bi-eye-slash" : "bi-eye")"></i>
                </button>
            </div>

            <div class="input-wrapper">
                <i class="bi bi-shield-lock input-icon"></i>
                <InputText class="input-field" @bind-Value="NewPassword" placeholder="Nowe hasło" type="@(ShowNew ? "text" : "password")" @oninput="_ => RecalcStrength()" />
                <button class="icon-btn" type="button" @onclick="() => ShowNew = !ShowNew" title="Pokaż/ukryj">
                    <i class="bi @(ShowNew ? "bi-eye-slash" : "bi-eye")"></i>
                </button>
            </div>

            <div class="pw-meter" aria-hidden="true">
                <div class="pw-meter__fill" style="width:@Strength%"></div>
                <div class="pw-meter__label">Siła hasła: @StrengthLabel</div>
            </div>

            <ul class="pw-rules">
                <li class="@(NewPassword.Length >= 8 ? "ok" : null)">min. 8 znaków</li>
                <li class="@(HasUpper ? "ok" : null)">wielka litera</li>
                <li class="@(HasLower ? "ok" : null)">mała litera</li>
                <li class="@(HasDigit ? "ok" : null)">cyfra</li>
                <li class="@(HasSpecial ? "ok" : null)">znak specjalny</li>
            </ul>

            <div class="input-wrapper">
                <i class="bi bi-lock-fill input-icon"></i>
                <InputText class="input-field" @bind-Value="ConfirmPassword" placeholder="Potwierdź nowe hasło" type="@(ShowConfirm ? "text" : "password")" />
                <button class="icon-btn" type="button" @onclick="() => ShowConfirm = !ShowConfirm" title="Pokaż/ukryj">
                    <i class="bi @(ShowConfirm ? "bi-eye-slash" : "bi-eye")"></i>
                </button>
            </div>

            <button class="btn login-btn" disabled="@IsSubmitting" @onclick="Submit">
                @(IsSubmitting ? "Przetwarzanie…" : "Zmień hasło")
            </button>
        }
    </div>
</div>

@code {
    string CurrentPassword = string.Empty;
    string NewPassword = string.Empty;
    string ConfirmPassword = string.Empty;
    string Error = string.Empty;
    string Success = string.Empty;
    bool IsSubmitting = false;

    bool ShowCurrent, ShowNew, ShowConfirm;
    int Strength;
    string StrengthLabel = "";

    bool HasUpper => NewPassword.Any(char.IsUpper);
    bool HasLower => NewPassword.Any(char.IsLower);
    bool HasDigit => NewPassword.Any(char.IsDigit);
    bool HasSpecial => NewPassword.Any(c => !char.IsLetterOrDigit(c));

    protected override async Task OnInitializedAsync()
    {
        // jeśli brak tokenu → do logowania
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/login");
        }
    }

    void RecalcStrength()
    {
        int score = 0;
        if (NewPassword.Length >= 8) score++;
        if (HasUpper) score++;
        if (HasLower) score++;
        if (HasDigit) score++;
        if (HasSpecial) score++;
        Strength = Math.Min(100, score * 20);
        StrengthLabel = score switch
        {
            <= 2 => "słabe",
            3 => "średnie",
            4 => "dobre",
            _ => "bardzo dobre"
        };
    }

    async Task Submit()
    {
        Error = string.Empty;

        if (string.IsNullOrWhiteSpace(CurrentPassword))
        {
            Error = "Podaj obecne hasło."; return;
        }
        if (NewPassword.Length < 8 || !(HasUpper && HasLower && HasDigit && HasSpecial))
        {
            Error = "Nowe hasło nie spełnia wymagań."; return;
        }
        if (NewPassword != ConfirmPassword)
        {
            Error = "Hasła nie są takie same."; return;
        }

        IsSubmitting = true;
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrWhiteSpace(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            if (!Http.DefaultRequestHeaders.Contains("Authorization"))
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var res = await Http.PostAsJsonAsync("/api/auth/change-password", new { currentPassword = CurrentPassword, newPassword = NewPassword });
            if (res.IsSuccessStatusCode)
            {
                Success = "Hasło zostało zmienione.";
                CurrentPassword = NewPassword = ConfirmPassword = string.Empty;
            }
            else if ((int)res.StatusCode == 401 || (int)res.StatusCode == 403)
            {
                Error = "Sesja wygasła. Zaloguj się ponownie.";
                await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");
                await JS.InvokeVoidAsync("localStorage.removeItem", "authUser");
                Navigation.NavigateTo("/login", true);
            }
            else
            {
                var msg = await res.Content.ReadAsStringAsync();
                Error = string.IsNullOrWhiteSpace(msg) ? "Nie udało się zmienić hasła." : msg;
            }
        }
        catch
        {
            Error = "Wystąpił błąd. Spróbuj ponownie.";
        }
        finally
        {
            IsSubmitting = false;
        }
    }
}