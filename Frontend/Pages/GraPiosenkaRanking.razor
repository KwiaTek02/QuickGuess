@page "/gra-piosenka-ranking"
@using Frontend.Services
@using Frontend.Shared
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthorizedHttpClient AuthHttp
@inject HttpClient Http

<h2 class="text-2xl font-bold mb-4">🎯 Tryb Rankingowy — Piosenka</h2>

<div class="game-fullscreen flex flex-col items-center justify-center min-h-screen text-center px-4">


    @if (!Started)
    {
        <p class="mb-4">Czy jesteś gotowy na wyzwanie muzyczne?</p>
        <button class="bg-blue-600 text-white px-6 py-2 rounded" @onclick="StartGame">Start</button>
    }
    else if (CurrentSong != null)
    {
        <div class="flex flex-col items-center gap-6 w-full max-w-3xl mt-6">

            <div class="volume-slider-container">
                <i class="fas fa-volume-up volume-icon"></i>
                <input type="range" min="0" max="1" step="0.01" @oninput="OnVolumeChanged" class="volume-slider" />
            </div>

            <audio src="@AudioUrl" @ref="AudioRef" crossorigin="anonymous"></audio>

            @if (!string.IsNullOrEmpty(AudioUrl))
            {
                <AudioVisualizer IsPlaying="@(Started && !Answered)" />
            }

            @if (Started && !Answered)
            {
                <div id="base-timer-container" class="circle-timer">
                    <div id="base-timer" class="base-timer">
                        <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                            <g class="base-timer__circle">
                                <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
                                <path
                                    id="base-timer-path-remaining"
                                    stroke-dasharray="283"
                                    class="base-timer__path-remaining green"
                                    d="
                      M 50, 50
                      m -45, 0
                      a 45,45 0 1,0 90,0
                      a 45,45 0 1,0 -90,0
                    "
                                ></path>
                            </g>
                        </svg>
                        <span id="base-timer-label" class="base-timer__label">0:20</span>
                    </div>
                </div>


            }

            <div class="input-wrapper-guess">
                <input class="guess-input" placeholder="🎵 Zgadnij tytuł..." @bind="Guess" @oninput="OnInput" disabled="@Answered" />
                
                @if (TitleSuggestions.Any())
                {
                    <ul class="suggestions-list">
                        @foreach (var title in TitleSuggestions)
                        {
                            <li @onclick="@(() => SelectSuggestion(title))">@title</li>
                        }
                    </ul>
                }

                <button class="submit-btn right-btn" @onclick="SubmitGuess" disabled="@Answered">
                    ✅ Zatwierdź
                </button>

            </div>
        </div>
    

        @*@if (Answered)
        {
            <div id="result-block" class="mt-4 p-4 rounded shadow bg-gray-100">
                <p class="font-bold text-lg whitespace-pre-line">@ResultMessage</p>

                <div class="flex gap-4 mt-4">
                    <button class="bg-gray-500 text-white px-4 py-2 rounded" @onclick='() => Navigation.NavigateTo("/panel")'>Wróć do panelu</button>
                    <button class="bg-blue-600 text-white px-4 py-2 rounded" @onclick="StartGame">Dalej</button>
                </div>
            </div>
        }*@
    }
</div>

@if (Answered)
{
    <div id="result-block" class="result-block">
        <p class="font-bold text-xl">@ResultMessage</p>

        <div class="stats-summary mt-4">
            <p><strong>⏱ Czas odpowiedzi:</strong> @Countdown sekund</p>
            <p><strong>🎯 Trafność:</strong> @(ResultMessage.Contains("Brawo") ? "✔️ Trafione" : "❌ Nie trafione")</p>
        </div>

        <div class="flex flex-wrap justify-center gap-8 mt-8">
            <button class="btn bg-gray-500" @onclick='() => Navigation.NavigateTo("/panel")'>Wróć do panelu</button>
            <button class="btn bg-blue-600" @onclick="StartGame">Dalej</button>
        </div>
    </div>
}




@code {
    protected class SongDto { public Guid Id { get; set; } public string Title { get; set; } = string.Empty; }
    protected class GuessResult
    {
        public bool Correct { get; set; }
        public int Score { get; set; }
        public int TotalScore { get; set; }
        public int RankingPosition { get; set; }
        public string CorrectTitle { get; set; } = "";
    }

    protected SongDto? CurrentSong;
    protected string AudioUrl = "";
    protected ElementReference AudioRef;
    protected string Guess = string.Empty;
    protected bool Started = false;
    protected bool Answered = false;
    protected string ResultMessage = "";
    protected DateTime StartTime;
    private List<string> TitleSuggestions = new();
    private int Countdown = 20;
    private System.Timers.Timer? countdownTimer;
    private Guid GameSessionId = Guid.NewGuid();
    private bool AudioStarted = false;
    private bool Muted = false;
    private double Progress = 1.0;
    private System.Timers.Timer? progressTimer;
    private const double Radius = 45.0;
    private string StrokeStyle => 
        $"stroke-dasharray:{Circumference:F2} {Circumference:F2};" +
        $"stroke-dashoffset:{StrokeOffset():F2};" +
        $"stroke:{GetColor()};" +
        $"transition:stroke-dashoffset 0.1s linear, stroke 0.3s;";



    private double Circumference => 2 * Math.PI * Radius;


    private async void StartCountdown()
    {
        Countdown = 20;
        StartTime = DateTime.Now;

        try
        {
            await JS.InvokeVoidAsync("Timer.start", DotNetObjectReference.Create(this), GameSessionId, 20);
        }
        catch (JSException ex)
        {
            Console.WriteLine($"JS Error: {ex.Message}");
        }

    }

    /*private void StartCountdown()
    {
        Countdown = 20;
        Progress = 1.0;
        StartTime = DateTime.Now;

        // Zatrzymaj poprzednie timery
        countdownTimer?.Stop();
        progressTimer?.Stop();

        // Timer sekundowy (co 1s)
        countdownTimer = new System.Timers.Timer(1000);
        countdownTimer.Elapsed += async (_, _) =>
        {
            if (Countdown > 0)
            {
                Countdown--;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                countdownTimer?.Stop();
                progressTimer?.Stop();
                await TimeoutGuess(GameSessionId);
            }
        };
        countdownTimer.Start();

        // Timer progresu (co 100ms)
        progressTimer = new System.Timers.Timer(100);
        progressTimer.Elapsed += async (_, _) =>
        {
            var elapsed = (DateTime.Now - StartTime).TotalSeconds;
            Progress = Math.Max(0, 1.0 - (elapsed / 20.0));
            Console.WriteLine($"Progress: {Progress:F2}, StrokeOffset: {StrokeOffset():F2}");
            await InvokeAsync(StateHasChanged);
        };
        progressTimer.Start();
    }*/

    private async Task OnInput(ChangeEventArgs e)
    {
        Guess = e.Value?.ToString() ?? "";
        if (Guess.Length >= 2)
        {
            TitleSuggestions = await Http.GetFromJsonAsync<List<string>>($"/api/songs/titles?query={Guess}");
        }
        else
        {
            TitleSuggestions.Clear();
        }
    }

    private void SelectSuggestion(string title)
    {
        Guess = title;
        TitleSuggestions.Clear();
    }

    protected async Task StartGame()
    {
        GameSessionId = Guid.NewGuid();

        Started = true;
        Answered = false;
        ResultMessage = "";
        Guess = "";

        var songs = await Http.GetFromJsonAsync<List<SongDto>>("/api/songs/random?count=1");
        if (songs?.Count > 0)
        {
            CurrentSong = songs[0];
            AudioStarted = false;
            AudioUrl = $"https://localhost:7236/api/media/song-audio/{CurrentSong.Id}";
            //AudioUrl = $"api/media/song-audio/{CurrentSong.Id}";
            await JS.InvokeVoidAsync("stopAudio", AudioRef);
            StateHasChanged();
            await Task.Delay(100);

            StartTime = DateTime.Now;
            StartCountdown();
        }
    }

    protected virtual async Task SubmitGuess()
    {
        if (CurrentSong == null) return;

        countdownTimer?.Stop();
        progressTimer?.Stop();

        await JS.InvokeVoidAsync("Timer.stop");

        var duration = (int)(DateTime.Now - StartTime).TotalSeconds;

        var request = new
        {
            itemId = CurrentSong.Id,
            guessText = CleanGuess(Guess),
            mode = "ranking",
            duration = duration
        };

        var client = await AuthHttp.GetClientAsync();
        var res = await client.PostAsJsonAsync("/api/guess/song", request);

        if (!res.IsSuccessStatusCode)
        {
            ResultMessage = "❌ Błąd serwera lub brak autoryzacji.";
            Answered = true;
            return;
        }

        var result = await res.Content.ReadFromJsonAsync<GuessResult>();
        Answered = true;

        await JS.InvokeVoidAsync("stopAudio", AudioRef);

        ResultMessage = result!.Correct
            ? $"🎉 Brawo! +{result.Score} pkt w {duration} sek\n" +
              $"Twój łączny wynik: {result.TotalScore} pkt\n" +
              $"Pozycja w rankingu: #{result.RankingPosition}"
            : $"❌ Pudło! Prawidłowy tytuł: {result.CorrectTitle}\n" +
              $"Twój wynik: {result.Score} pkt w {duration} sek\n" +
              $"Łącznie: {result.TotalScore} pkt | Pozycja: #{result.RankingPosition}";

        await JS.InvokeVoidAsync("scrollToElement", "result-block");
    }

    [JSInvokable]
    public async Task TimeoutGuess(Guid sessionId)
    {
        if (sessionId != GameSessionId || Answered || !Started)
            return;

        Answered = true;
        ResultMessage = "⏱ Czas minął!";
        await JS.InvokeVoidAsync("stopAudio", AudioRef);
        countdownTimer?.Stop();
        progressTimer?.Stop();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Started && CurrentSong != null && !Answered && AudioRef.Context != null && !AudioStarted)
        {
            AudioStarted = true;

            await Task.Delay(200); 

            await JS.InvokeVoidAsync("playAudio", AudioRef);

            await JS.InvokeVoidAsync("startTimeout",
                DotNetObjectReference.Create(this),
                "invokeMethodAsync",
                nameof(TimeoutGuess),
                GameSessionId,
                20000);
        }
    } 

    private string CleanGuess(string input)
    {
        var match = System.Text.RegularExpressions.Regex.Match(input, @"^(.*?)(?: \(\d{4}\))?$");
        if (match.Success)
        {
            var cleaned = match.Groups[1].Value;
            if (cleaned.Contains(" - "))
                return cleaned.Split(" - ")[1].Trim();
            return cleaned.Trim();
        }
        return input.Trim();
    }

    private async Task ToggleMute()
    {
        Muted = !Muted;
        await JS.InvokeVoidAsync(Muted ? "muteAudio" : "unmuteAudio", AudioRef);
    }

    private async Task OnVolumeChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (double.TryParse(value, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out var volume))
        {
            await JS.InvokeVoidAsync("setAudioVolume", AudioRef, volume);
        }
    }

    private double StrokeOffset() => Progress * Circumference;

    private string GetColor()
    {
        if (Countdown > 13)
            return "#22c55e"; // green
        else if (Countdown > 6)
            return "#f59e0b"; // orange
        else
            return "#ef4444"; // red
    }

}
