@page "/reset-password"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.WebUtilities

<div class="fullscreen-bg">
    <div class="login-card enhanced">
        <h2 class="login-title">Ustaw nowe hasło</h2>

        @if (!string.IsNullOrEmpty(Error))
        {
            <p class="error">@Error</p>
        }

        @if (string.IsNullOrEmpty(Token))
        {
            <p class="error">Nieprawidłowy lub brakujący token.</p>
            <button class="btn login-btn" @onclick='() => Navigation.NavigateTo("/login")'>Wróć do logowania</button>
        }
        else if (Success)
        {
            <p style="color:#16a34a;font-weight:600">Hasło zostało zmienione. Możesz się zalogować.</p>
            <button class="btn login-btn" @onclick='() => Navigation.NavigateTo("/login")'>Przejdź do logowania</button>
        }
        else
        {
            <div class="input-wrapper">
                <i class="bi bi-lock-fill input-icon"></i>
                <InputText class="input-field" @bind-Value="NewPassword" type="password" placeholder="Nowe hasło" />
            </div>

            <div class="input-wrapper">
                <i class="bi bi-lock-fill input-icon"></i>
                <InputText class="input-field" @bind-Value="ConfirmPassword" type="password" placeholder="Powtórz hasło" />
            </div>

            <button class="btn login-btn" @onclick="SubmitReset">Zmień hasło</button>
        }
    </div>
</div>

@code {
    string Token = "";
    string NewPassword = "";
    string ConfirmPassword = "";
    string Error = "";
    bool Success = false;

    protected override void OnInitialized()
    {
        var q = QueryHelpers.ParseQuery(new Uri(Navigation.Uri).Query);
        if (q.TryGetValue("token", out var t)) Token = t.ToString();
    }

    private async Task SubmitReset()
    {
        Error = "";

        if (string.IsNullOrEmpty(NewPassword) || NewPassword.Length < 6)
        {
            Error = "Hasło musi mieć co najmniej 6 znaków.";
            return;
        }
        if (NewPassword != ConfirmPassword)
        {
            Error = "Hasła nie są takie same.";
            return;
        }

        var res = await Http.PostAsJsonAsync("/api/auth/reset-password", new
        {
            token = Token,
            newPassword = NewPassword
        });

        if (res.IsSuccessStatusCode)
        {
            Success = true;
        }
        else
        {
            Error = "Link wygasł lub jest nieprawidłowy.";
        }
    }
}
