@page "/panel-piosenka"
@using System.Net.Http.Json
@using Frontend.Services
@inject NavigationManager Navigation
@inject AuthorizedHttpClient AuthHttp

<div class="player-panel">
    <div class="left-panel">
        <h2 class="section-title">🎵 Jaka To Piosenka?</h2>

        <div class="mode-buttons">
            <button class="mode-btn music" @onclick='() => Navigation.NavigateTo("/gra-piosenka-ranking")'>
                🎯 Tryb Rankingowy
            </button>
            <button class="mode-btn music" @onclick='() => Navigation.NavigateTo("/gra-piosenka-trening")'>
                🧠 Tryb Treningowy
            </button>
        </div>

        <div class="stats-box">
            <div class="box-title-row">
                <h3 class="box-title">📊 Twoje statystyki (ranking)</h3>
                <button class="btn-modal neutral" @onclick="LoadStats" disabled="@loading">Odśwież</button>
            </div>

            @if (loading)
            {
                <div class="stats-grid">
                    @for (var i = 0; i < 8; i++)
                    {
                        <div class="stat skeleton">
                            <div class="sk-line" style="width:55%"></div>
                            <div class="sk-bar" style="height:18px;margin-top:.4rem"></div>
                        </div>
                    }
                </div>
            }
            else if (!string.IsNullOrEmpty(error))
            {
                <div class="lb-empty">❗ @error</div>
            }
            else if (Stats is null)
            {
                <div class="lb-empty">Brak danych statystycznych.</div>
            }
            else
            {
                <div class="stats-grid">
                    @*<div class="stat">
                        <div class="stat-label">🏆 Pozycja w rankingu</div>
                        <div class="stat-value">#@Stats.RankingPosition</div>
                    </div>*@

                    <div class="stat">
                        <div class="stat-label">🎮 Rozegrane gry</div>
                        <div class="stat-value">@Stats.Games</div>
                    </div>

                    <div class="stat">
                        <div class="stat-label">✔️ Trafionych&nbsp;/&nbsp;❌ Nietrafionych</div>
                        <div class="stat-value">@Stats.Correct / @Stats.Incorrect</div>
                    </div>

                    @*<div class="stat">
                        <div class="stat-label">❌ Nietrafionych</div>
                        <div class="stat-value">@Stats.Incorrect</div>
                    </div>*@

                    <div class="stat">
                        <div class="stat-label">📈 % wygranych</div>
                        <div class="stat-value">@($"{Stats.WinRate:P0}")</div>
                    </div>

                    <div class="stat">
                        <div class="stat-label">⚡ Najszybsza odpowiedź</div>
                        <div class="stat-value">@($"{Stats.BestTimeSec:0.00} s")</div>
                    </div>

                    <div class="stat">
                        <div class="stat-label">⏳ Średni czas</div>
                        <div class="stat-value">@($"{Stats.AvgTimeSec:0.00} s")</div>
                    </div>

                    <div class="stat">
                        <div class="stat-label">💯 Łączny wynik</div>
                        <div class="stat-value">@Stats.TotalScore pkt</div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="right-panel">
        <div class="ranking-box">
            <h3 class="box-title">🏆 Ranking Piosenki</h3>
            <RankingTop10 TylkoPiosenki="true" />
        </div>
    </div>
</div>

@code {
    private bool loading = true;
    private string? error;
    private PlayerSongStats? Stats;

    // identyczny model jak w oknie wyniku gry rankingowej
    public class PlayerSongStats
    {
        public int Games { get; set; }
        public int Correct { get; set; }
        public int Incorrect { get; set; }
        public double WinRate { get; set; }
        public int RankingPosition { get; set; }
        public double BestTimeSec { get; set; }
        public double AvgTimeSec { get; set; }
        public int TotalScore { get; set; }
    }

    protected override async Task OnInitializedAsync() => await LoadStats();

    private async Task LoadStats()
    {
        loading = true;
        error = null;
        try
        {
            var client = await AuthHttp.GetClientAsync();
            Stats = await client.GetFromJsonAsync<PlayerSongStats>("/api/stats/me/song-ranking");
        }
        catch
        {
            error = "Nie udało się załadować statystyk. Spróbuj ponownie.";
            Stats = null;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
}
