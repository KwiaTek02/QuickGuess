@page "/gra-film-trening"
@using System.Diagnostics
@using Frontend.Services
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthorizedHttpClient AuthHttp
@inject HttpClient Http

<div class="game-fullscreen @(!Started ? "is-start" : "has-fixed-title") flex flex-col items-center justify-center min-h-screen text-center px-4">
    <h1 class="game-title">🎬 Jaki To Film?</h1>

    @if (!Started)
    {
        <section class="song-hero">
            <div class="song-hero__chip">
                <i class="fas fa-dumbbell"></i>
                Tryb treningowy
            </div>

            <h2 class="song-hero__title">Jaki To Film?</h2>
            <p class="song-hero__subtitle">Sprawdź oko bez presji punktów.</p>

            <button class="btn-hero" @onclick="StartGame">
                <span class="btn-hero__glow"></span>
                <i class="fas fa-play"></i>
                <span>Start</span>
                <kbd>Enter</kbd>
            </button>
        </section>
    }
    else if (IsRoundLoading || CurrentMovie is null)
    {
        <!-- PRELOADER RUNDY -->
        <div class="preloader" aria-busy="true" aria-live="polite">
            <i class="fas fa-film fa-spin" aria-hidden="true"></i>
            <p>Ładuję rundę…</p>
            <small>Losuję film i przygotowuję timer.</small>
        </div>
    }
    else
    {
        <div class="flex flex-col items-center gap-6 w-full max-w-3xl mt-6">

            <img src="@ImageUrl" alt="Kadr z filmu" class="film-image-preview" />

            @if (Started && !Answered)
            {
                <div class="hud-timer hud-timer--xl" aria-live="polite">
                    <div id="base-timer" class="base-timer" role="timer" aria-label="Pozostały czas">
                        <svg class="base-timer__svg" viewBox="0 0 100 100">
                            <g class="base-timer__circle">
                                <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
                                <path id="base-timer-path-remaining" stroke-dasharray="283"
                                      class="base-timer__path-remaining green"
                                      d="M 50, 50 m -45, 0 a 45,45 0 1,0 90,0 a 45,45 0 1,0 -90,0">
                                </path>
                            </g>
                        </svg>
                        <span id="base-timer-label" class="base-timer__label">0:20</span>
                    </div>
                </div>
            }

            @* === OKNO WYNIKU (z loaderem) === *@
            @if (Answered)
            {
                <div class="result-modal" role="dialog" aria-modal="true">
                    <div class="result-header @(IsResultLoading ? "loading" : (LastGuessCorrect ? "win" : "lose"))">
                        <h3 class="result-title">
                            @(IsResultLoading ? "⏳ Liczenie wyniku…" : (LastGuessCorrect ? "🎉Dobrze!" : "❌Spróbuj ponownie!"))
                        </h3>
                        <p class="result-subtitle">
                            @(IsResultLoading ? "Przeliczam odpowiedź…" : ResultMessage)
                        </p>
                    </div>

                    @if (IsResultLoading)
                    {
                        <div class="result-loading">
                            <i class="fas fa-circle-notch fa-spin" aria-hidden="true"></i>
                            <span>Proszę czekać…</span>
                        </div>
                    }

                    <div class="result-actions">
                        <button class="btn-modal neutral" @onclick='() => Navigation.NavigateTo("/panel")'>
                            Wróć do panelu
                        </button>
                        <button class="btn-modal primary" @onclick="StartGame">
                            Jeszcze raz (Enter)
                        </button>
                    </div>

                    <button class="result-close" title="Zamknij (Esc)"
                            @onclick='() => Navigation.NavigateTo("/panel")'>
                        ×
                    </button>
                </div>
            }

            @* === TYPEAHEAD === *@
            <div class="film-input-wrapper-guess" id="guess-wrapper">
                <div class="typeahead film-typeahead">
                    <input class="film-guess-input typeahead__input"
                           placeholder="🎬 Zgadnij tytuł…"
                           value="@Guess"
                           @oninput="OnInput"
                           @onkeydown="OnKeyDown"
                           @onfocus="() => OpenSuggestions = TitleSuggestions?.Any() == true"
                           aria-autocomplete="list"
                           aria-controls="title-suggestions"
                           aria-expanded="@OpenSuggestions"
                           aria-activedescendant="@(ActiveIndex >= 0 ? $"sug-{ActiveIndex}" : null)"
                           disabled="@Answered" />

                    <button class="submit-btn film-submit-btn" @onclick="SubmitGuess" disabled="@Answered">
                        ✅ Zatwierdź
                    </button>

                    <div class="typeahead__panel @(OpenSuggestions ? "is-open" : "")" id="title-suggestions" role="listbox">
                        @if (SuggestionsLoading)
                        {
                            <ul class="sug-list">
                                @for (var i = 0; i < 5; i++)
                                {
                                    <li class="sug-item is-skeleton">
                                        <span class="sug-icon"></span>
                                        <span class="skeleton-line w60"></span>
                                        <kbd class="sug-kbd">Enter</kbd>
                                    </li>
                                }
                            </ul>
                        }
                        else if (TitleSuggestions.Any())
                        {
                            <ul class="sug-list">
                                @for (var i = 0; i < TitleSuggestions.Count; i++)
                                {
                                    var t = TitleSuggestions[i];
                                    <li id="@($"sug-{i}")"
                                        role="option"
                                        class="sug-item @(i == ActiveIndex ? "is-active" : "")"
                                        @onmouseenter="@(() => ActiveIndex = i)"
                                        @onmousedown="@(() => SelectSuggestion(t))">
                                        <i class="fas fa-film sug-icon" aria-hidden="true"></i>
                                        <div class="sug-text">@((MarkupString)HighlightMatch(t, Guess))</div>
                                        <kbd class="sug-kbd">Enter</kbd>
                                    </li>
                                }
                            </ul>
                            <div class="typeahead__footer hint">
                                <span><kbd>↑</kbd><kbd>↓</kbd> – wybór • <kbd>Enter</kbd> – wstaw • <kbd>Esc</kbd> – zamknij</span>
                            </div>
                        }
                        else if (!SuggestionsLoading && OpenSuggestions)
                        {
                            <div class="typeahead__empty">
                                Brak podpowiedzi dla <strong>@Guess</strong>.
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    protected class MovieDto { public Guid Id { get; set; } public string Title { get; set; } = string.Empty; }
    protected class GuessResult
    {
        public bool Correct { get; set; }
        public int Score { get; set; }
        public string CorrectTitle { get; set; } = "";
        public string? DisplayTitle { get; set; }
    }

    // === Nowe flagi ===
    private bool IsRoundLoading = false;  // loader przed startem rundy
    private bool IsResultLoading = false; // loader w oknie wyniku

    private readonly Stopwatch _sw = new();
    private double LastAnswerDurationSec;

    protected MovieDto? CurrentMovie;
    protected string ImageUrl = "";
    protected string Guess = string.Empty;
    protected bool Started = false;
    protected bool Answered = false;
    protected string ResultMessage = "";
    protected DateTime StartTime;

    private List<string> TitleSuggestions = new();

    private bool OpenSuggestions = false;
    private bool SuggestionsLoading = false;
    private int ActiveIndex = -1;
    private CancellationTokenSource? _sugCts;

    private Guid GameSessionId = Guid.NewGuid();
    private int Countdown = 20;
    private bool LastGuessCorrect;

    private async void StartCountdown()
    {
        Countdown = 20;
        StartTime = DateTime.Now;
        try { await JS.InvokeVoidAsync("Timer.start", DotNetObjectReference.Create(this), GameSessionId, 20); }
        catch (JSException ex) { Console.WriteLine($"JS Error: {ex.Message}"); }
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        Guess = e.Value?.ToString() ?? string.Empty;

        _sugCts?.Cancel();
        TitleSuggestions ??= new();
        if (string.IsNullOrWhiteSpace(Guess) || Guess.Length < 2)
        {
            TitleSuggestions.Clear();
            OpenSuggestions = false;
            ActiveIndex = -1;
            SuggestionsLoading = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        SuggestionsLoading = true;
        OpenSuggestions = true;
        ActiveIndex = 0;
        await InvokeAsync(StateHasChanged);

        var cts = new CancellationTokenSource();
        _sugCts = cts;

        try
        {
            await Task.Delay(180, cts.Token);
            var url = $"/api/movies/titles?query={Uri.EscapeDataString(Guess)}";
            var resp = await Http.GetFromJsonAsync<List<string>>(url, cts.Token);
            TitleSuggestions = resp ?? new();
        }
        catch (TaskCanceledException) { return; }
        finally
        {
            if (!cts.IsCancellationRequested)
            {
                SuggestionsLoading = false;
                OpenSuggestions = TitleSuggestions.Count > 0;
                ActiveIndex = OpenSuggestions ? 0 : -1;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void SelectSuggestion(string title)
    {
        Guess = title;
        TitleSuggestions.Clear();
        CloseSuggestions();
    }

    protected async Task StartGame()
    {
        GameSessionId = Guid.NewGuid();
        Started = true;
        Answered = false;
        ResultMessage = "";
        Guess = "";
        LastGuessCorrect = false;
        TitleSuggestions.Clear();

        IsRoundLoading = true;  // ⇦ pokaż loader rundy

        var movies = await Http.GetFromJsonAsync<List<MovieDto>>("/api/movies/random?count=1");
        if (movies?.Count > 0)
        {
            CurrentMovie = movies[0];
            ImageUrl = $"https://localhost:7236/api/media/movie-image/{CurrentMovie.Id}";
            StateHasChanged();
            await Task.Delay(50);

            StartTime = DateTime.Now;
            _sw.Reset();
            _sw.Start();
            StartCountdown();
        }

        IsRoundLoading = false; // ⇦ zdejmij loader
        StateHasChanged();
    }

    protected async Task SubmitGuess()
    {
        if (CurrentMovie == null || Answered) return;

        Answered = true;
        IsResultLoading = true; // ⇦ pokaż loader w modalu
        await JS.InvokeVoidAsync("Timer.stop");

        _sw.Stop();
        var durationMs = (int)_sw.ElapsedMilliseconds;
        LastAnswerDurationSec = durationMs / 1000.0;

        var request = new
        {
            itemId = CurrentMovie.Id,
            guessText = CleanGuess(Guess),
            mode = "training",
            duration = durationMs
        };

        var client = await AuthHttp.GetClientAsync();
        var res = await client.PostAsJsonAsync("/api/guess/movie", request);

        if (!res.IsSuccessStatusCode)
        {
            ResultMessage = "❌ Błąd serwera lub brak autoryzacji.";
            IsResultLoading = false;
            return;
        }

        var result = await res.Content.ReadFromJsonAsync<GuessResult>();

        LastGuessCorrect = result!.Correct;
        ResultMessage = result.DisplayTitle ?? result.CorrectTitle;

        IsResultLoading = false; // ⇦ ukryj loader
        StateHasChanged();
    }

    [JSInvokable]
    public async Task TimeoutGuess(Guid sessionId)
    {
        if (sessionId != GameSessionId || Answered || !Started)
            return;

        _sw.Stop();
        Answered = true;
        ResultMessage = "⏱ Czas minął!";
        await JS.InvokeVoidAsync("Timer.stop");
        StateHasChanged();
    }

    private string CleanGuess(string input)
    {
        var match = System.Text.RegularExpressions.Regex.Match(input, @"^(.*?)(?: \(\d{4}\))?$");
        if (match.Success)
        {
            var cleaned = match.Groups[1].Value;
            if (cleaned.Contains(" - "))
                return cleaned.Split(" - ")[1].Trim();
            return cleaned.Trim();
        }
        return input.Trim();
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (Answered) return;

        switch (e.Key)
        {
            case "ArrowDown":
                if (TitleSuggestions.Count > 0) { OpenSuggestions = true; ActiveIndex = (ActiveIndex + 1) % TitleSuggestions.Count; }
                break;
            case "ArrowUp":
                if (TitleSuggestions.Count > 0) { OpenSuggestions = true; ActiveIndex = (ActiveIndex <= 0 ? TitleSuggestions.Count - 1 : ActiveIndex - 1); }
                break;
            case "Enter":
                if (OpenSuggestions && ActiveIndex >= 0 && ActiveIndex < TitleSuggestions.Count) SelectSuggestion(TitleSuggestions[ActiveIndex]);
                else await SubmitGuess();
                break;
            case "Escape":
                CloseSuggestions();
                break;
        }
    }

    private void CloseSuggestions()
    {
        OpenSuggestions = false;
        ActiveIndex = -1;
        SuggestionsLoading = false;
    }

    private static string HighlightMatch(string text, string query)
    {
        if (string.IsNullOrWhiteSpace(text)) return System.Net.WebUtility.HtmlEncode(text);
        if (string.IsNullOrWhiteSpace(query)) return System.Net.WebUtility.HtmlEncode(text);

        var idx = text.IndexOf(query, StringComparison.OrdinalIgnoreCase);
        if (idx < 0) return System.Net.WebUtility.HtmlEncode(text);

        var before = System.Net.WebUtility.HtmlEncode(text[..idx]);
        var match = System.Net.WebUtility.HtmlEncode(text.Substring(idx, query.Length));
        var after = System.Net.WebUtility.HtmlEncode(text[(idx + query.Length)..]);

        return $"{before}<mark>{match}</mark>{after}";
    }
}
