@page "/gra-film-trening"
@using Frontend.Services
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthorizedHttpClient AuthHttp
@inject HttpClient Http

<div class="game-fullscreen @(!Started ? "is-start" : "has-fixed-title") flex flex-col items-center justify-center min-h-screen text-center px-4">
    <h1 class="game-title">🎬 Jaki To Film?</h1>

    @if (!Started)
    {
        <section class="song-hero">
            <div class="song-hero__chip">
                <i class="fas fa-dumbbell"></i>
                Tryb treningowy
            </div>

            <h2 class="song-hero__title">Jaki To Film?</h2>
            <p class="song-hero__subtitle">Sprawdź oko bez presji punktów.</p>

            <button class="btn-hero" @onclick="StartGame">
                <span class="btn-hero__glow"></span>
                <i class="fas fa-play"></i>
                <span>Start</span>
                <kbd>Enter</kbd>
            </button>
        </section>
    }
    else if (CurrentMovie != null)
    {
        <div class="flex flex-col items-center gap-6 w-full max-w-3xl mt-6">

            <img src="@ImageUrl" alt="Kadr z filmu" class="film-image-preview" />

            @if (Started && !Answered)
            {
                <div class="hud-timer hud-timer--xl" aria-live="polite">
                    <div id="base-timer" class="base-timer" role="timer" aria-label="Pozostały czas">
                        <svg class="base-timer__svg" viewBox="0 0 100 100">
                            <g class="base-timer__circle">
                                <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
                                <path id="base-timer-path-remaining" stroke-dasharray="283"
                                      class="base-timer__path-remaining green"
                                      d="M 50, 50 m -45, 0 a 45,45 0 1,0 90,0 a 45,45 0 1,0 -90,0">
                                </path>
                            </g>
                        </svg>
                        <span id="base-timer-label" class="base-timer__label">0:20</span>
                    </div>
                </div>
            }

            @* === OKNO WYNIKU NAD INPUTEM (bez statystyk – trening) === *@
            @if (Answered)
            {
                <div class="result-modal" role="dialog" aria-modal="true">
                    <div class="result-header @(LastGuessCorrect ? "win" : "lose")">
                        <h3 class="result-title">
                            @((LastGuessCorrect) ? "🎉Dobrze!" : "❌Spróbuj ponownie!")
                        </h3>
                        <p class="result-subtitle">@ResultMessage</p>
                    </div>

                    <div class="result-actions">
                        <button class="btn-modal neutral" @onclick='() => Navigation.NavigateTo("/panel")'>
                            Wróć do panelu
                        </button>
                        <button class="btn-modal primary" @onclick="StartGame">
                            Jeszcze raz (Enter)
                        </button>
                    </div>

                    <button class="result-close" title="Zamknij (Esc)"
                            @onclick='() => Navigation.NavigateTo("/panel")'>
                        ×
                    </button>
                </div>
            }

            <div class="film-input-wrapper-guess" id="guess-wrapper">
                <input class="film-guess-input" placeholder="🎬 Zgadnij tytuł..."
                       @bind="Guess" @oninput="OnInput" disabled="@Answered" />

                @if (TitleSuggestions.Any())
                {
                    <ul class="film-suggestions-list">
                        @foreach (var title in TitleSuggestions)
                        {
                            <li @onclick="@(() => SelectSuggestion(title))">@title</li>
                        }
                    </ul>
                }

                <button class="film-submit-btn" @onclick="SubmitGuess" disabled="@Answered">✅ Zatwierdź</button>
            </div>
        </div>
    }
</div>

@code {
    // === DTOs ===
    protected class MovieDto { public Guid Id { get; set; } public string Title { get; set; } = string.Empty; }
    protected class GuessResult
    {
        public bool Correct { get; set; }
        public int Score { get; set; }
        public string CorrectTitle { get; set; } = "";
        public string? DisplayTitle { get; set; }
    }

    // === State ===
    protected MovieDto? CurrentMovie;
    protected string ImageUrl = "";
    protected string Guess = string.Empty;
    protected bool Started = false;
    protected bool Answered = false;
    protected string ResultMessage = "";
    protected DateTime StartTime;
    private List<string> TitleSuggestions = new();

    private Guid GameSessionId = Guid.NewGuid();
    private int Countdown = 20; // tylko dla JS timera (UI)
    private bool LastGuessCorrect;

    // === Timer (wspólny z innymi ekranami) ===
    private async void StartCountdown()
    {
        Countdown = 20;
        StartTime = DateTime.Now;

        try
        {
            await JS.InvokeVoidAsync("Timer.start", DotNetObjectReference.Create(this), GameSessionId, 20);
        }
        catch (JSException ex)
        {
            Console.WriteLine($"JS Error: {ex.Message}");
        }
    }

    // === Autocomplete ===
    private async Task OnInput(ChangeEventArgs e)
    {
        Guess = e.Value?.ToString() ?? "";
        if (Guess.Length >= 2)
        {
            TitleSuggestions = await Http.GetFromJsonAsync<List<string>>($"/api/movies/titles?query={Guess}");
        }
        else
        {
            TitleSuggestions.Clear();
        }
    }

    private void SelectSuggestion(string title)
    {
        Guess = title;
        TitleSuggestions.Clear();
    }

    // === Flow ===
    protected async Task StartGame()
    {
        GameSessionId = Guid.NewGuid();
        Started = true;
        Answered = false;
        ResultMessage = "";
        Guess = "";
        LastGuessCorrect = false;
        TitleSuggestions.Clear();

        var movies = await Http.GetFromJsonAsync<List<MovieDto>>("/api/movies/random?count=1");
        if (movies?.Count > 0)
        {
            CurrentMovie = movies[0];
            ImageUrl = $"https://localhost:7236/api/media/movie-image/{CurrentMovie.Id}";
            StateHasChanged();
            await Task.Delay(50);

            StartTime = DateTime.Now;
            StartCountdown();
        }
    }

    protected async Task SubmitGuess()
    {
        if (CurrentMovie == null || Answered) return;

        Answered = true;                 // zablokuj UI
        await JS.InvokeVoidAsync("Timer.stop");

        var duration = (int)(DateTime.Now - StartTime).TotalSeconds;

        var request = new
        {
            itemId = CurrentMovie.Id,
            guessText = CleanGuess(Guess),
            mode = "training",
            duration = duration
        };

        var client = await AuthHttp.GetClientAsync();
        var res = await client.PostAsJsonAsync("/api/guess/movie", request);

        if (!res.IsSuccessStatusCode)
        {
            ResultMessage = "❌ Błąd serwera lub brak autoryzacji.";
            return;
        }

        var result = await res.Content.ReadFromJsonAsync<GuessResult>();
        LastGuessCorrect = result!.Correct;

        // W treningu po prostu pokazujemy poprawny tytuł (jak w piosenkach)
        ResultMessage = result.DisplayTitle ?? result.CorrectTitle;
    }

    [JSInvokable]
    public async Task TimeoutGuess(Guid sessionId)
    {
        if (sessionId != GameSessionId || Answered || !Started)
            return;

        Answered = true;
        ResultMessage = "⏱ Czas minął!";
        await JS.InvokeVoidAsync("Timer.stop");
        StateHasChanged();
    }

    // === Utils ===
    private string CleanGuess(string input)
    {
        var match = System.Text.RegularExpressions.Regex.Match(input, @"^(.*?)(?: \(\d{4}\))?$");
        if (match.Success)
        {
            var cleaned = match.Groups[1].Value;
            if (cleaned.Contains(" - "))
                return cleaned.Split(" - ")[1].Trim();
            return cleaned.Trim();
        }
        return input.Trim();
    }
}
