@using Frontend.Services
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS
@inject AuthState AuthState

    <nav class="nav-bar">
        <div class="logo" @onclick='() => Navigation.NavigateTo("/")'>
            🎧 QuickGuess
        </div>
        <div class="nav-actions">
            @if (IsLoggedIn)
            {
                <span class="username">Witaj, @FullName</span>
                <button class="btn logout" @onclick="Logout">Wyloguj się</button>
            }
            else
            {
                <button class="btn login" @onclick='() => Navigation.NavigateTo("/login")'>Zaloguj się</button>
                <button class="btn register" @onclick='() => Navigation.NavigateTo("/register")'>Zarejestruj się</button>
            }
        </div>
    </nav>


@code {
    private string? FullName;
    private bool IsLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        AuthState.OnChange += async () =>
        {
            await LoadUser();
            StateHasChanged();
        };

        await LoadUser();
    }

    private async Task LoadUser()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (!string.IsNullOrWhiteSpace(token))
        {
            IsLoggedIn = true;
            FullName = await JS.InvokeAsync<string>("localStorage.getItem", "authUser") ?? "Użytkownik";
        }
        else
        {
            IsLoggedIn = false;
        }
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");
        await JS.InvokeVoidAsync("localStorage.removeItem", "authUser");
        AuthState.NotifyAuthenticationChanged();
        Navigation.NavigateTo("/login", true);
    }
}